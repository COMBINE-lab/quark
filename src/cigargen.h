/*
 * cigargen.h
 *
 *  Created on: Aug 6, 2014
 *      Author: Ivan Sovic
 */

//  The MIT License (MIT)
//
//  Copyright (c) 2014 Ivan Sovic
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.



#ifndef CIGARGEN_H_
#define CIGARGEN_H_

#include <stdio.h>
#include <stdint.h>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>

#define TYPE_MATCH      0
#define TYPE_MISMATCH   1
#define TYPE_INSERTION  2
#define TYPE_DELETION   3

#define PENALTY_MATCH      5
#define PENALTY_MISMATCH  -2
#define PENALTY_INSERTION -6
#define PENALTY_DELETION  -6

const char kTypeToSymbol[] = {'M', 'X', 'I', 'D'};
#define TypeToSymbol(x) ((x < 4) ? (kTypeToSymbol[x]) : 'X')

// Generate "Compact Idiosyncratic Gapped Alignment Report" (CIGAR) format strings. Implemented using Needleman-Wunsch
// dynamic programming algorithm. Because of this, query and reference are supposed to be aligned to the left of both
// sequences, i.e. a result of sequence alignment can be found in SAM files reports the starting position of an alignment -
// this function is useful when such location is known, and the pointer to this location on reference is passed
// as the reference parameter.
// This function is a basic implementation, which is both quadratic in time and in memory.
// @param query pointer to the C-style string of nucleotide characters ('A', 'C', 'T', 'G'; although it should work for non-nucleic characters also).
// @param query_length length of the query sequence.
// @param reference pointer to the C-style string of nucleotide characters ('A', 'C', 'T', 'G'; although it should work for non-nucleic characters also).
// @param reference_length length of the reference sequence.
// @param ret_cigar if NULL, the CIGAR string will not be returned, only the alignment length. The resulting CIGAR string consists of 4 characters (and their appropriate counts): 'M' for match, 'X' for mismatch, 'I' for insertion and 'D' for deletion.
// @param ret_alignment_length return the length of alignment.
// @param ret_alignment not required, and has default value of NULL. If non-NULL, the resulting alignment will be generated. This alignment has one special character '+' which denotes that the query has an insertion at that point (reference has a deletion).
// @return less than 0 if something went wrong otherwise the edit distance.
int32_t GenerateCigar(char *query, uint32_t query_length, char *reference, uint32_t reference_length, std::string *ret_cigar, uint32_t *ret_alignment_length=NULL, std::string *ret_alignment=NULL);

// Prints the matrices to a file stream.
// @param fp file pointer to the stream where verbose will be output (e.g. stdout).
// @param query pointer to the C-style string of nucleotide characters ('A', 'C', 'T', 'G'; although it should work for non-nucleic characters also).
// @param query_length length of the query sequence.
// @param reference pointer to the C-style string of nucleotide characters ('A', 'C', 'T', 'G'; although it should work for non-nucleic characters also).
// @param reference_length length of the reference sequence.
// @param cigar the CIGAR string generated by GenerateCigar function.
// @param dp_matrix the dynamic programming matrix of scores internally generated by GenerateCigar function.
// @param dp_traceback the dynamic programming matrix of traceback pointers internally generated by GenerateCigar function.
void Verbose(FILE *fp, char *query, uint32_t query_length, char *reference, uint32_t reference_length, std::string &cigar, std::vector<std::vector<int32_t> > &dp_matrix, std::vector<std::vector<uint8_t> > &dp_traceback);

#endif /* CIGARGEN_H_ */
